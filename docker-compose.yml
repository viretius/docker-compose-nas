#https://github.com/anujdatar/porkbun-ddns/tree/main porkbun ddns

services:
  # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy
    restart: always
    networks:
      socket_proxy:
        ipv4_address: 192.168.91.254 # You can specify a static IP
    # privileged: true # true for VM. False for unprivileged LXC container.
    ports:
      - "127.0.0.1:2375:2375" # Port 2375 should only ever get exposed to the internal network. When possible use this line.
    # I use the next line instead, as I want portainer to manage multiple docker endpoints within my home network.
    # - "2375:2375"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=1 # Watchtower
      # Not always needed
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1 # Portainer
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer
      - NODES=0
      - PLUGINS=1
      - SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 # Portainer
      - VOLUMES=1 # Portainer
  traefik:
    image: ghcr.io/traefik/traefik:3.4
    container_name: traefik
    restart: always
    security_opt:
      - "no-new-privileges:true"
    secrets: # make secrets files available at /run/secrets
      - cloudflare_email
      - cloudflare_dns_api_token
      - cloudflare_zone_api_token
    environment:
      - CLOUDFLARE_EMAIL_FILE=/run/secrets/cloudflare_email
      - CLOUDFLARE_DNS_API_TOKEN_FILE=/run/secrets/cloudflare_dns_api_token
      - CLOUDFLARE_ZONE_API_TOKEN_FILE=/run/secrets/cloudflare_zone_api_token
      - LETS_ENCRYPT_EMAIL=${LETS_ENCRYPT_EMAIL}
    command: #static
      - --ping=true
      - --api=true
      - --api.insecure=true #
      - --api.dashboard=true
      - --providers.docker=true
      - --serversTransport.insecureSkipVerify=true # Skip TLS verification for Docker socket
      - --traefik.http.routers.api.entrypoints=traefik"
      - --providers.docker.exposedbydefault=false
      - --providers.docker.endpoint=tcp://socket-proxy:2375 # Enable for Socket Proxy. Disable otherwise.
      - --providers.docker.network=reverse_proxy # Traefik searches for container labels only in the specified network
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.traefik.address=:8080
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --experimental.plugins.rewrite-body.modulename=github.com/packruler/rewrite-body
      - --experimental.plugins.rewrite-body.version=v1.2.0
      - --experimental.plugins.rewriteHeaders.modulename=github.com/XciD/traefik-plugin-rewrite-headers
      - --experimental.plugins.rewriteHeaders.version=v0.0.3
      - --certificatesresolvers.myresolver.acme.dnschallenge=${DNS_CHALLENGE:-true}
      - --certificatesresolvers.myresolver.acme.dnschallenge.provider=${DNS_CHALLENGE_PROVIDER:-cloudflare}
      - --certificatesresolvers.myresolver.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53
      - --certificatesresolvers.myresolver.acme.caserver=${LETS_ENCRYPT_CA_SERVER:-https://acme-v02.api.letsencrypt.org/directory}
      - --certificatesresolvers.myresolver.acme.email=${LETS_ENCRYPT_EMAIL}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
    labels: #dynamic
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`traefik.$HOSTNAME`)" # HTTP Router for the dashboard
      - "traefik.http.routers.traefik.entrypoints=websecure"
      #- "traefik.http.routers.traefik-rtr.middlewares=chain-authelia@file" # For Authelia Authentication
      - "traefik.http.middlewares.whitelist.ipwhitelist.sourcerange=192.168.178.0/24,192.168.91.0/24"
      - "traefik.http.routers.traefik.middlewares=whitelist" # IP Whitelist for the dashboard
      # Services - API
      - "traefik.http.routers.traefik.service=api@internal"
    networks:
      reverse_proxy:
        ipv4_address: 192.168.90.254 # specify a static IP
      socket_proxy:
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - "8080:8080" #dashboard
    volumes:
      - ${CONFIG_ROOT:-.}/letsencrypt:/letsencrypt
      - ${CONFIG_ROOT:-.}/traefik/acme/acme.json:/acme.json # Certs File 
      #- "/var/run/docker.sock:/var/run/docker.sock:ro"
    extra_hosts:
      - host.docker.internal:172.17.0.1
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      retries: 10
  
  sonarr:
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/sonarr:/config
      - ${DATA_ROOT}:/data
    restart: always
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://127.0.0.1:8989/sonarr/ping"]
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.rule=Host(`sonarr.$HOSTNAME`)
      - traefik.http.routers.sonarr.tls=true
      - traefik.http.routers.sonarr.tls.certresolver=myresolver
      - traefik.http.services.sonarr.loadbalancer.server.port=8989
  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/radarr:/config
      - ${DATA_ROOT}:/data
    restart: always
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://127.0.0.1:7878/radarr/ping"]
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr.rule=Host(`radarr.$HOSTNAME`)
      - traefik.http.routers.radarr.tls=true
      - traefik.http.routers.radarr.tls.certresolver=myresolver
      - traefik.http.services.radarr.loadbalancer.server.port=7878
  lidarr:
    image: lscr.io/linuxserver/lidarr
    container_name: lidarr
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/lidarr:/config
      - ${DATA_ROOT}:/data
    restart: always
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://127.0.0.1:8686/lidarr/ping"]
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.lidarr.rule=(Host(`${HOSTNAME}`) && PathPrefix(`/lidarr`))
      - traefik.http.routers.lidarr.tls=true
      - traefik.http.routers.lidarr.tls.certresolver=myresolver
      - traefik.http.services.lidarr.loadbalancer.server.port=8686
    profiles:
      - lidarr
  bazarr:
    image: lscr.io/linuxserver/bazarr
    container_name: bazarr
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/bazarr/config:/config
      - ${DATA_ROOT}:/data
    restart: always
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://127.0.0.1:6767/bazarr/ping"]
      interval: 5s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.bazarr.rule=(Host(`${HOSTNAME}`) && PathPrefix(`/bazarr`))
      - traefik.http.routers.bazarr.tls=true
      - traefik.http.routers.bazarr.tls.certresolver=myresolver
      - traefik.http.services.bazarr.loadbalancer.server.port=6767
      - homepage.group=Download
      - homepage.name=Bazarr
      - homepage.icon=bazarr.png
      - homepage.href=/bazarr
      - homepage.description=Subtitles management
      - homepage.weight=4
      - homepage.widget.type=bazarr
      - homepage.widget.url=http://bazarr:6767/bazarr
      - homepage.widget.key=${BAZARR_API_KEY}
  jellyseerr:
    image: ghcr.io/fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    security_opt:
      - no-new-privileges:true
    environment:
      - LOG_LEVEL=debug
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/jellyseerr:/app/config
    restart: always
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "http://127.0.0.1:5055/api/v1/status",
          "-qO",
          "/dev/null",
        ]
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyseerr.rule=(Host(`${JELLYSEERR_HOSTNAME}`))
      - traefik.http.routers.jellyseerr.tls=true
      - traefik.http.routers.jellyseerr.tls.certresolver=myresolver
      - traefik.http.services.jellyseerr.loadbalancer.server.port=5055
      - homepage.group=Media
      - homepage.name=JellySeerr
      - homepage.icon=jellyseerr.png
      - homepage.href=https://${JELLYSEERR_HOSTNAME}
      - homepage.description=Content Recommendations and Request Management
      - homepage.weight=3
      - homepage.widget.type=jellyseerr
      - homepage.widget.url=http://jellyseerr:5055
      - homepage.widget.key=${JELLYSEERR_API_KEY}
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    ports:
      - "9696:9696"
    security_opt:
      - no-new-privileges:true
    network_mode: "service:vpn"
    depends_on:
      vpn:
        condition: service_healthy
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/prowlarr:/config
    restart: always
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://127.0.0.1:9696/prowlarr/ping"]
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.prowlarr.rule=Host(`prowlarr.$HOSTNAME`)"
      - traefik.http.routers.prowlarr.tls=true
      - traefik.http.routers.prowlarr.tls.certresolver=myresolver
      - traefik.http.services.prowlarr.loadbalancer.server.port=9696
      - homepage.group=Download
      - homepage.name=Prowlarr
      - homepage.icon=prowlarr.png
      - homepage.href=/prowlarr
      - homepage.description=Indexers management
      - homepage.weight=1
      - homepage.widget.type=prowlarr
      - homepage.widget.url=http://prowlarr:9696/prowlarr
      - homepage.widget.key=${PROWLARR_API_KEY}
  flaresolverr: #bypass Cloudflare and DDoS-GUARD protection
    image: 21hsmw/flaresolverr:nodriver
    container_name: flaresolverr
    security_opt:
      - no-new-privileges:true
    restart: always
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - TZ=${TIMEZONE}
    labels:
      - traefik.enable=true
      - traefik.http.routers.flaresolverr.rule=PathPrefix(`/flaresolverr`)
      - traefik.http.routers.flaresolverr.tls=true
      - traefik.http.services.flaresolverr.loadbalancer.server.port=8191
    profiles:
      - flaresolverr
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:libtorrentv1
    container_name: qbittorrent
    # ports:
    #   - "8081:8080" # Explosed via gluetun. 8081 because traefik-dashboard is using port 8080
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - WEBUI_PORT=8080
      - DOCKER_MODS=ghcr.io/gabe565/linuxserver-mod-vuetorrent
    volumes:
      - ${CONFIG_ROOT:-.}/qbittorrent:/config
      - ${DOWNLOAD_ROOT}:/data/torrents
      - ${CONFIG_ROOT:-.}/gluetun:/gluetun
    restart: unless-stopped
    healthcheck:
      # Container may fail if the PIA's token expired, so mark as unhealthy when there is no internet connection
      # see: https://github.com/qdm12/gluetun/issues/641#issuecomment-933856220
      test:
        ["CMD", "curl", "--fail", "http://127.0.0.1:8080", "https://google.com"]
      interval: 30s
      retries: 10
    network_mode: "service:vpn"
    depends_on:
      vpn:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.http.routers.qbittorrent.rule=(Host(`${HOSTNAME}`) && PathPrefix(`/qbittorrent`))
      - traefik.http.routers.qbittorrent.tls=true
      - traefik.http.routers.qbittorrent.tls.certresolver=myresolver
      - traefik.http.services.qbittorrent.loadbalancer.server.port=8080
     #- com.centurylinklabs.watchtower.depends-on=/vpn

  #https://github.com/qdm12/gluetun/discussions/2686
  gluetun:
    image: qmcgaw/gluetun:v3.39.0 # Pinned to this version to avoid issues in v3.40+ specific to protonvpn
    container_name: gluetun
    stdin_open: true
    tty: true
    security_opt:
      - no-new-privileges:true
    cap_add:
      - NET_ADMIN
    networks:
      - reverse-proxy
    devices:
      - /dev/net/tun:/dev/net/tun
    volumes:
      - ${CONFIG_ROOT:-.}/gluetun:/gluetun
      - ${CONFIG_ROOT:-.}/qbittorent/config:/config
      - ${CONFIG_ROOT:-.}/qbittorent/active:/active
      - ${CONFIG_ROOT:-.}/traefik/acme/:/acme
    ports:
      - 8778:8888/tcp  # HTTP proxy
      - 8001:8000/tcp  # GT Control Server
      - 8388:8388/tcp  # Shadowsocks
      - 8388:8388/udp  # Shadowsocks
      - 8080:8080      # Exposing QBittorrent-dashboard through Docker Host LAN IP  
      - 6881:6881      # QB
      - 6881:6881/udp  # QB
    environment:
      - VPN_SERVICE_PROVIDER=${VPN_SERVICE_PROVIDER:-protonvpn}
      - VPN_PORT_FORWARDING=on
      - VPN_PORT_FORWARDING_PROVIDER=${VPN_SERVICE_PROVIDER:-protonvpn}  
      - VPN_PORT_FORWARDING_STATUS_FILE=/gluetun/forwarded_port     
      - TZ=${TIMEZONE}
      - UPDATER_PERIOD=24h
      - FIREWALL_OUTBOUND_SUBNETS=192.168.91.0/24,172.17.0.0/24
      - DOT_PROVIDERS=cloudflare,google
      - PUBLICIP_API=ip2location
      #- PORT_FORWARD_ONLY=on
      ### Wireguard Settings
      - VPN_TYPE={VPN_TYPE:-wireguard}
      #In qbittorrent, make sure you check Bypass authentication for clients on localhost, 
      #then you don't need to worry about passing auth into the port manager container.
      #- WIREGUARD_PUBLIC_KEY=$wgPublicKey
      - WIREGUARD_PRIVATE_KEY=$wgPrivateKey
      #- WIREGUARD_ENDPOINT_IP=$endpointIP   
      - WIREGUARD_ADDRESSES=$wgAddresses
      - SERVER_HOSTNAMES=$serverHostnames #https://raw.githubusercontent.com/qdm12/gluetun/master/internal/storage/servers.json
      - LOG_LEVEL=warn
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.default.disable_ipv6=1
      - net.ipv6.conf.all.disable_ipv6=1
      - net.ipv6.conf.lo.disable_ipv6=1
    #https://github.com/qdm12/gluetun-wiki/blob/main/setup/advanced/vpn-port-forwarding.md
    command: 
      - VPN_PORT_FORWARDING_UP_COMMAND=/bin/sh -c 'wget -O- --retry-connrefused --post-data "json={\"listen_port\":{{PORTS}}}" http://127.0.0.1:8080/api/v2/app/setPreferences 2>&1'
    labels:
      - traefik.enable=true"
      - traefik.http.routers.qbittorrent.entrypoints=websecure
      - traefik.http.routers.qbittorrent.rule=Host(`qbit.$HOSTNAME)
      - traefik.http.routers.qbittorrent.tls=true
      - traefik.http.routers.qbittorrent.tls.certresolver=myresolver
      - traefik.http.services.qbittorrent.loadbalancer.server.port=8080 #qBittorrent-dashboard
    healthcheck:
      test: ping -c 1 www.google.com || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always    

  unpackerr:
    image: ghcr.io/unpackerr/unpackerr:latest
    container_name: unpackerr
    volumes:
      - ${DOWNLOAD_ROOT}:/data/torrents
    restart: always
    user: ${USER_ID}:${GROUP_ID}
    environment:
      - TZ=${TIMEZONE}
      - UN_SONARR_0_URL=http://sonarr:8989/sonarr
      - UN_SONARR_0_API_KEY=${SONARR_API_KEY}
      - UN_RADARR_0_URL=http://radarr:7878/radarr
      - UN_RADARR_0_API_KEY=${RADARR_API_KEY}

  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd:latest
    container_name: sabnzbd
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/sabnzbd:/config
      - ${DATA_ROOT}:/data
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.sabnzbd.rule=(Host(`${HOSTNAME}`) && PathPrefix(`/sabnzbd`) || PathPrefix(`/sabnzbd`))
      - traefik.http.routers.sabnzbd.tls=true
      - traefik.http.routers.sabnzbd.tls.certresolver=myresolver
      - traefik.http.services.sabnzbd.loadbalancer.server.port=8080
      - homepage.group=Download
      - homepage.name=Sabnzbd
      - homepage.icon=sabnzbd.png
      - homepage.href=/sabnzbd
      - homepage.description=Usenet
      - homepage.weight=3
      - homepage.widget.type=sabnzbd
      - homepage.widget.url=http://sabnzbd:8080/sabnzbd
      - homepage.widget.key=${SABNZBD_API_KEY}
    profiles:
      - sabnzbd
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - JELLYFIN_PublishedServerUrl=${HOSTNAME}/jellyfin
    volumes:
      - ${CONFIG_ROOT:-.}/jellyfin:/config
      - ${DATA_ROOT}:/data
    ports:
      - "7359:7359/udp"
      - "1900:1900/udp"
    restart: always
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://127.0.0.1:8096/jellyfin/health"]
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyfin.rule=(Host(`${HOSTNAME}`) && PathPrefix(`/jellyfin`))
      - traefik.http.routers.jellyfin.tls=true
      - traefik.http.routers.jellyfin.tls.certresolver=myresolver
      - traefik.http.services.jellyfin.loadbalancer.server.port=8096
      - homepage.group=Media
      - homepage.name=Jellyfin
      - homepage.icon=jellyfin.png
      - homepage.href=/jellyfin
      - homepage.description=Media server
      - homepage.weight=4
      - homepage.widget.type=jellyfin
      - homepage.widget.url=http://jellyfin:8096/jellyfin
      - homepage.widget.key=${JELLYFIN_API_KEY}
  calibre-web:
    image: lscr.io/linuxserver/calibre-web:latest
    container_name: calibre-web
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - DOCKER_MODS=linuxserver/mods:universal-calibre
      - OAUTHLIB_RELAX_TOKEN_SCOPE=1
    volumes:
      - ${CONFIG_ROOT:-.}/calibre-web:/config
      - ${DATA_ROOT}/books:/books
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.calibre-headers.headers.customRequestHeaders.X-Scheme=https
      - traefik.http.middlewares.calibre-headers.headers.customRequestHeaders.X-Script-Name=/calibre
      - traefik.http.middlewares.calibre-stripprefixregex.stripPrefixRegex.regex=/calibre
      - traefik.http.routers.calibre.middlewares=calibre-headers,calibre-stripprefixregex
      - traefik.http.routers.calibre.rule=(Host(`${HOSTNAME}`) && PathPrefix(`/calibre`))
      - traefik.http.routers.calibre.tls=true
      - traefik.http.routers.calibre.tls.certresolver=myresolver
      - traefik.http.services.calibre.loadbalancer.server.port=8083
      - homepage.group=Media
      - homepage.name=Calibre-Web
      - homepage.icon=calibre-web.png
      - homepage.href=/calibre
      - homepage.description=Books management
      - homepage.weight=5
      - homepage.widget.type=calibreweb
      - homepage.widget.url=http://calibre-web:8083
      - homepage.widget.username=${CALIBRE_USERNAME}
      - homepage.widget.password=${CALIBRE_PASSWORD}
    profiles:
      - calibre-web
  decluttarr:
    image: ghcr.io/manimatter/decluttarr:latest
    container_name: decluttarr
    restart: always
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - RADARR_URL=http://radarr:7878/radarr
      - RADARR_KEY=${RADARR_API_KEY}
      - SONARR_URL=http://sonarr:8989/sonarr
      - SONARR_KEY=${SONARR_API_KEY}
      - LIDARR_URL=http://lidarr:8686/lidarr
      - LIDARR_KEY=${LIDARR_API_KEY}
      - QBITTORRENT_URL=http://qbittorrent:8080
      - QBITTORRENT_USERNAME=${QBITTORRENT_USERNAME}
      - QBITTORRENT_PASSWORD=${QBITTORRENT_PASSWORD}
      - LOG_LEVEL=${DECLUTTARR_LOG_LEVEL:-INFO}
      - TEST_RUN=${DECLUTTARR_TEST_RUN:-False}
      - REMOVE_TIMER=${DECLUTTARR_REMOVE_TIMER:-10}
      - REMOVE_FAILED=${DECLUTTARR_REMOVE_FAILED:-True}
      - REMOVE_FAILED_IMPORTS=${DECLUTTARR_REMOVE_FAILED_IMPORTS:-True}
      - REMOVE_METADATA_MISSING=${DECLUTTARR_REMOVE_METADATA_MISSING:-True}
      - REMOVE_MISSING_FILES=${DECLUTTARR_REMOVE_MISSING_FILES:-True}
      - REMOVE_ORPHANS=${DECLUTTARR_REMOVE_ORPHANS:-True}
      - REMOVE_SLOW=${DECLUTTARR_REMOVE_SLOW:-True}
      - REMOVE_STALLED=${DECLUTTARR_REMOVE_STALLED:-True}
      - REMOVE_UNMONITORED=${DECLUTTARR_REMOVE_UNMONITORED:-True}
      - RUN_PERIODIC_RESCANS=${DECLUTTARR_RUN_PERIODIC_RESCANS:-}
      - PERMITTED_ATTEMPTS=${DECLUTTARR_PERMITTED_ATTEMPTS:-3}
      - NO_STALLED_REMOVAL_QBIT_TAG=${DECLUTTARR_REMOVAL_QBIT_TAG:-"stalled"}
      - MIN_DOWNLOAD_SPEED=${DECLUTTARR_MIN_DOWNLOAD_SPEED:-100}
      - FAILED_IMPORT_MESSAGE_PATTERNS=${DECLUTTARR_FAILED_IMPORT_MESSAGE_PATTERNS:-}
      - IGNORED_DOWNLOAD_CLIENTS=${DECLUTTARR_IGNORED_DOWNLOAD_CLIENTS:-}
    profiles:
      - decluttarr
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    environment:
      - DOCKER_HOST: tcp://socket-proxy:2375 # instead of - /var/run/docker.sock:/var/run/docker.sock:ro
      - HOMEPAGE_VAR_TITLE=${HOMEPAGE_VAR_TITLE}
      - HOMEPAGE_VAR_SEARCH_PROVIDER=${HOMEPAGE_VAR_SEARCH_PROVIDER}
      - HOMEPAGE_VAR_HEADER_STYLE=${HOMEPAGE_VAR_HEADER_STYLE}
      - HOMEPAGE_VAR_WEATHER_CITY=${HOMEPAGE_VAR_WEATHER_CITY}
      - HOMEPAGE_VAR_WEATHER_LAT=${HOMEPAGE_VAR_WEATHER_LAT}
      - HOMEPAGE_VAR_WEATHER_LONG=${HOMEPAGE_VAR_WEATHER_LONG}
      - HOMEPAGE_VAR_WEATHER_TIME=${TIMEZONE}
      - HOMEPAGE_VAR_WEATHER_UNIT=${HOMEPAGE_VAR_WEATHER_UNIT}
      - HOMEPAGE_ALLOWED_HOSTS=${HOSTNAME}
    volumes:
      - ${CONFIG_ROOT:-.}/homepage:/app/config
      - ${DATA_ROOT}:/data
    restart: always
    command:
      [sh, -c, "cp -n /app/config/tpl/*.yaml /app/config && node server.js"]
    labels:
      - traefik.enable=true
      - traefik.http.routers.homepage.rule=(Host(`${HOSTNAME}`) && PathPrefix(`/`))
      - traefik.http.routers.homepage.tls=true
      - traefik.http.routers.homepage.tls.certresolver=myresolver
      - traefik.http.services.homepage.loadbalancer.server.port=3000
  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${INSTALL_DIRECTORY}/config/portainer:/data
    labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.rule=(Host(`${HOSTNAME}`) && PathPrefix(`/`))
      - traefik.http.routers.portainer.tls=true
      - traefik.http.routers.portainer.tls.certresolver=myresolver
      - traefik.http.services.portainer.loadbalancer.server.port=9000
    restart: unless-stopped

  watchtower:
    image: ghcr.io/containrrr/watchtower:latest
    container_name: watchtower
    restart: always
    environment:
      - WATCHTOWER_CLEANUP=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  autoheal:
    image: willfarrell/autoheal:latest
    container_name: autoheal
    restart: always
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

networks:
  default:
    driver: bridge
  socket_proxy:
    name: socket_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.91.0/24
  reverse_proxy:
    external: true

secrets:
  cloudflare_email:
    file: ./secrets/cloudflare_email
  cloudflare_dns_api_token:
    file: ./secrets/cloudflare_dns_api_token
  cloudflare_zone_api_token:
    file: ./secrets/cloudflare_zone_api_token