#https://github.com/anujdatar/porkbun-ddns/tree/main porkbun ddns

services:
  # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    container_name: socket-proxy
    image: lscr.io/linuxserver/socket-proxy:latest
    restart: always
    networks:
      socket_proxy:
        ipv4_address: 192.168.91.254 # You can specify a static IP
    # privileged: true # true for VM. False for unprivileged LXC container.
    ports:
      - "127.0.0.1:2375:2375" # Port 2375 should only ever get exposed to the internal network. When possible use this line.
    # I use the next line instead, as I want portainer to manage multiple docker endpoints within my home network.
    # - "2375:2375"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=1 # Portainer
      # Not always needed
      - BUILD=1
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1 # Portainer
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer
      - NODES=0
      - PLUGINS=1
      - SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=1
      - TASKS=1 # Portainer
      - VOLUMES=1 # Portainer, Homepage
    read_only: true
    tmpfs:
      - /run
  traefik:
    image: ghcr.io/traefik/traefik:3.4
    container_name: traefik
    restart: always
    networks: 
      # specify static IPs
      reverse_proxy:
        ipv4_address: 192.168.90.250 
      socket_proxy:
        ipv4_address: 192.168.91.250
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" #insecure dashboard
    security_opt:
      - no-new-privileges:true
    secrets: # make secrets files available at /run/secrets
      - porkbun_api_key
      - porkbun_secret_api_key
    environment:
      - PORKBUN_API_KEY_FILE=/run/secrets/porkbun_api_key
      - PORKBUN_SECRET_API_KEY_FILE=/run/secrets/porkbun_secret_api_key
    command: #static
      - --ping=true
      - --api=true
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --serversTransport.insecureSkipVerify=true # Skip TLS verification for Docker socket
      #- --traefik.http.routers.api.entrypoints=traefik"
      #- --entrypoints.websecure.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS,$LOCAL_IPS #if exposing traefik to the internet
      - --providers.docker.exposedbydefault=false
      - --providers.docker.endpoint=tcp://socket-proxy:2375 # Enable for Socket Proxy. Disable otherwise.
      - --providers.docker.network=reverse_proxy # Traefik searches for container labels only in the specified network
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      #- --entrypoints.traefik.address=:8080 
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      ### dns challenge
      - --certificatesresolvers.myresolver.acme.dnschallenge=true
      - --certificatesresolvers.myresolver.acme.dnschallenge.provider=porkbun
      - --certificatesresolvers.myresolver.acme.dnschallenge.delaybeforecheck=120
      - --certificatesresolvers.myresolver.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53
      - --certificatesresolvers.myresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.myresolver.acme.email=${LETS_ENCRYPT_EMAIL}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
    labels: #dynamic
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`$HOMEPAGE_VAR_TRAEFIK_DOMAINNAME`) # HTTP Router for the dashboard
      - traefik.http.routers.api.service=api@internal
      - traefik.http.routers.api.middlewares=auth"
      - traefik.http.middlewares.auth.basicauth.users=micham:$$2a$$12$$H3BPEIS1Vx.436medt8au.6A3VkAWcj7hK/f8dT7s5EKVH5d3vHMG
      # - traefik.http.routers.api.tls=true
      # - traefik.http.routers.sonarr.tls.certresolver=myresolver
      # - traefik.http.routers.api.entrypoints=websecure
      # - traefik.http.services.traefik-dashboard.loadbalancer.server.port=8080
      # - traefik.http.routers.traefik-dashboard.middlewares=auth"
      # - traefik.http.middlewares.auth.basicauth.users=$(TRAEFIK_USER):$(TRAEFIK_PW)"
      # - traefik.http.routers.traefik-rtr.middlewares=chain-authelia@file" # For Authelia Authentication
    volumes:
      - ${CONFIG_ROOT:-.}/letsencrypt:/letsencrypt
      - ./traefik/users:/traefik/users
    #extra_hosts:
    #  - host.docker.internal:172.17.0.1 #? 
    depends_on:
      - socket-proxy
    healthcheck:
      test: ["CMD", traefik", "healthcheck", "--ping"]
      interval: 30s
      retries: 10
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    security_opt:
      - no-new-privileges:true
    networks: 
      reverse_proxy:
        ipv4_address: 192.168.90.10
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/sonarr:/config
      - ${DATA_ROOT}:/data
    restart: always
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://127.0.0.1:8989/ping"]
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.rule=Host(`$HOMEPAGE_VAR_SONARR_DOMAINNAME`)
      - traefik.http.routers.sonarr.entrypoints=websecure
      - traefik.http.routers.sonarr.tls=true
      - traefik.http.routers.sonarr.tls.certresolver=myresolver
      - traefik.http.services.sonarr.loadbalancer.server.port=8989
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    networks: 
      reverse_proxy:
        ipv4_address: 192.168.90.20
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/radarr:/config
      - ${DATA_ROOT}:/data
    restart: always
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://127.0.0.1:7878/ping"]
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr.rule=Host(`${HOMEPAGE_VAR_RADARR_DOMAINNAME}`)
      - traefik.http.routers.radarr.entrypoints=websecure
      - traefik.http.routers.radarr.tls=true
      - traefik.http.routers.radarr.tls.certresolver=myresolver
      - traefik.http.services.radarr.loadbalancer.server.port=7878
  lidarr:
    image: lscr.io/linuxserver/lidarr
    container_name: lidarr
    security_opt:
      - no-new-privileges:true
    networks: 
      reverse_proxy:
        ipv4_address: 192.168.90.30
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/lidarr:/config
      - ${DATA_ROOT}:/data
    restart: always
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://127.0.0.1:8686/ping"]
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.lidarr.rule=Host(`$HOMEPAGE_VAR_LIDARR_DOMAINNAME`)
      - traefik.http.routers.lidarr.tls=true
      - traefik.http.routers.lidarr.entrypoints=websecure
      - traefik.http.routers.lidarr.tls.certresolver=myresolver
      - traefik.http.services.lidarr.loadbalancer.server.port=8686
  bazarr:
    image: lscr.io/linuxserver/bazarr
    container_name: bazarr
    networks: 
      reverse_proxy:
        ipv4_address: 192.168.90.40
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/bazarr/config:/config
      - ${DATA_ROOT}:/data
    restart: always
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://127.0.0.1:6767/ping"]
      interval: 5s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.bazarr.rule=Host(`$HOMEPAGE_VAR_BAZARR_DOMAINNAME`)
      - traefik.http.routers.bazarr.tls=true
      - traefik.http.routers.bazarr.entrypoints=websecure
      - traefik.http.routers.bazarr.tls.certresolver=myresolver
      - traefik.http.services.bazarr.loadbalancer.server.port=6767
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    # ports:
    #   - "9696:9696" # Explosed via gluetun
    security_opt:
      - no-new-privileges:true
    network_mode: "service:gluetun"
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/prowlarr:/config
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://127.0.0.1:9696/ping"]
      interval: 30s
      retries: 10
    # labels:
      # prowlarr-dashboard
      # - traefik.enable=true
      # - traefik.http.routers.prowlarr.entrypoints=websecure
      # - traefik.http.routers.prowlarr.rule=Host(`$HOMEPAGE_VAR_PROWLARR_DOMAINNAME`)
      # - traefik.http.routers.prowlarr.tls=true
      # - traefik.http.routers.prowlarr.tls.certresolver=myresolver
      # - traefik.http.services.prowlarr.loadbalancer.server.port=9696
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    networks: 
      reverse_proxy:
        ipv4_address: 192.168.90.65
    devices:
      - /dev/dri:/dev/dri
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - JELLYFIN_PublishedServerUrl=https://jellyfin.kingsmanlab.com
    volumes:
      - ${CONFIG_ROOT:-.}/jellyfin:/config
      - ${MEDIA_ROOT}:/data/media
    #ports:
      #- "7359:7359/udp"
      #- "1900:1900/udp"
    restart: always
   # healthcheck:
    #  test: ping -c 1 www.google.com || exit 1
     # interval: 30s
    #  timeout: 10s
    #  retries: 3
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyfin.rule=Host(`$HOMEPAGE_VAR_JELLYFIN_DOMAINNAME`)
      - traefik.http.routers.jellyfin.entrypoints=websecure
      - traefik.http.routers.jellyfin.tls=true
      - traefik.http.routers.jellyfin.tls.certresolver=myresolver
      - traefik.http.services.jellyfin.loadbalancer.server.port=8096
  jellyseerr:
    image: ghcr.io/fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    security_opt:
      - no-new-privileges:true
    devices:
      - /dev/dri:/dev/dri
    networks: 
      reverse_proxy:
        ipv4_address: 192.168.90.55
    environment:
      - LOG_LEVEL=debug
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/jellyseerr:/app/config
    restart: always
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "http://127.0.0.1:5055/api/v1/status",
          "-qO",
          "/dev/null",
        ]
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyseerr.rule=Host(`$HOMEPAGE_VAR_JELLYSEERR_DOMAINNAME`)
      - traefik.http.routers.jellyseerr.tls=true
      - traefik.http.routers.jellyseerr.entrypoints=websecure
      - traefik.http.routers.jellyseerr.tls.certresolver=myresolver
      - traefik.http.services.jellyseerr.loadbalancer.server.port=5055
  flaresolverr: #bypass Cloudflare and DDoS-GUARD protection
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    networks:
      reverse_proxy:
        ipv4_address:
          192.168.90.5
    security_opt:
      - no-new-privileges:true
    restart: always
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-debug}
      - LOG_HTML=${LOG_HTML:-true}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-hcaptcha-solver}
      - TZ=${TIMEZONE}
    ports:
      - "${PORT:-8191}:8191"
  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd:latest
    container_name: sabnzbd
    ports:
      - "8085:8080"
    networks:
      reverse_proxy:
        ipv4_address: 192.168.90.8
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/sabnzbd:/config
      - ${DATA_ROOT}:/data
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.sabnzbd.rule=Host(`$HOMEPAGE_VAR_SABNZBD_DOMAINNAME`)
      - traefik.http.routers.sabnzbd.tls=true
      - traefik.http.routers.bazarr.entrypoints=websecure
      - traefik.http.routers.sabnzbd.tls.certresolver=myresolver
      - traefik.http.services.sabnzbd.loadbalancer.server.port=8080
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    restart: always
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - WEBUI_PORT=8081 
      - WEBUI_USERNAME=${QBITTORRENT_USERNAME}
      - WEBUI_PASSWORD=${QBITTORRENT_PASSWORD}
      - QBITTORRENT_INTERFACE=tun0  # Forces all traffic through VPN interface
      # Port Forwarding Mod (Syncs qBittorrent with Gluetun)
      - DOCKER_MODS=ghcr.io/t-anc/gsp-qbittorent-gluetun-sync-port-mod:main
      - GSP_GTN_API_KEY=${HOMEPAGE_VAR_GSP_GTN_API_KEY:-randomapikey}  # Gluetun API-key for port forwarding updates
      - GSP_QBITTORRENT_PORT=${GSP_QBITTORRENT_PORT:-53764}  # Torrenting port (auto-updated by Gluetun)
      - GSP_MINIMAL_LOGS=false  # Enables full logs for debugging purposes
    volumes:
      - ./qbittorrent/config:/config
      - ${CONFIG_ROOT:-.}/gluetun:/gluetun
      - ${DOWNLOAD_ROOT}:/data/torrents
    # ─── Performance Optimization ──────────────────────────────────────
    ulimits:
      nofile:
        soft: 32768
        hard: 65536  # Increases allowed open files (important for high-speed torrenting)
    healthcheck:
      # Container may fail if the VPN token expired, so mark as unhealthy when there is no internet connection
      # see: https://github.com/qdm12/gluetun/issues/641#issuecomment-933856220
      test:
        ["CMD", "curl", "--fail", "http://127.0.0.1:8080", "https://google.com"]
      interval: 1m
      retries: 10
    network_mode: "service:gluetun"
    depends_on:
      gluetun:
        condition: service_healthy
    #https://github.com/qdm12/gluetun/discussions/2686
  gluetun:
    #image: qmcgaw/gluetun:v3.39.0 # Pinned to this version to avoid issues in v3.40+ specific to protonvpn
    image: ghcr.io/qdm12/gluetun
    container_name: gluetun
    stdin_open: true
    security_opt:
      - no-new-privileges:true
    cap_add:
      - NET_ADMIN
    networks:
      reverse_proxy:
        ipv4_address:
          192.168.90.9
    devices:
      - /dev/net/tun:/dev/net/tun
    secrets:
      - wireguard_private_key
    volumes:
      - ${CONFIG_ROOT:-.}/gluetun:/gluetun #store cpn-config persistently
      - ${CONFIG_ROOT:-.}/qbittorent/config:/config
      - ${CONFIG_ROOT:-.}/qbittorent/active:/active
      - ${CONFIG_ROOT:-.}/traefik/acme/:/acme
      - ./gluetun/config.toml:/gluetun/auth/config.toml
    ports:
      - 8081:8080      # Exposing QBittorrent-dashboard through Docker Host LAN IP  
      #- 9696:9696      # Prowlarr
      #- 8778:8888/tcp  # HTTP proxy (e.g. privoxy)
      #- 8388:8388/tcp  # Shadowsocks
      #- 8388:8388/udp  # Shadowsocks
      #- 8000:8000/tcp  # GT Control Server (api to update listening-port), not needed, since the mod is running in a container with network_mode: "service:gluetun"
      - 6881:6881      # QB for active P2P
      - 6881:6881/udp  # QB for active P2P
    environment:
      # - HEALTH_VPN_DURATION_INITIAL=15s # https://airvpn.org/forums/topic/63708-gluetun-port-forwarding-works-for-an-hour/
      # - VPN_PORT_FORWARDING_UP_COMMAND=/bin/sh -c 'wget -O- --retry-connrefused --post-data "json={\"listen_port\":{{PORTS}}}" http://127.0.0.1:8080/api/v2/app/setPreferences 2>&1'
      - VPN_SERVICE_PROVIDER=${VPN_SERVICE_PROVIDER:-protonvpn}
      - VPN_TYPE=wireguard
      - VPN_PORT_FORWARDING=on
      - PORT_FORWARD_ONLY=on # use Port forwarding enabled servers only
      - TZ=${TIMEZONE}
      # WIREGUARD SETTINGS
      - WIREGUARD_PRIVATE_KEY_FILE=/run/secrets/wireguard_private_key
      - SERVER_COUNTRIES=Netherlands,Denmark,Sweden,Finland
      - LOG_LEVEL=warn
      - UPDATER_PERIOD=24h #update vpn-serverstats (ips, keys,...)
      - FIREWALL_OUTBOUND_SUBNETS=192.168.90.0/24,172.17.0.0/24,172.19.0.0/24 # let qbittorrent communicate with other services in the lokal network
      #- DOT_PROVIDERS=cloudflare,google #dns-over-tls
      #In qbittorrent, make sure you check Bypass authentication for clients on localhost, 
      #then you don't need to worry about passing auth into the port manager container. 
    sysctls:
       # Disables IPv6 to prevent leaks
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.default.disable_ipv6=1
      - net.ipv6.conf.all.disable_ipv6=1
      - net.ipv6.conf.lo.disable_ipv6=1
    #https://github.com/qdm12/gluetun-wiki/blob/main/setup/advanced/vpn-port-forwarding.md
    healthcheck:
      test: ping -c 1 www.google.com || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always   
  unpackerr:
    image: ghcr.io/unpackerr/unpackerr:latest
    container_name: unpackerr
    networks:
        reverse_proxy:
          ipv4_address: 192.168.90.44
    volumes:
      - ${DATA_ROOT}:/data
    restart: always
    user: ${USER_ID}:${GROUP_ID}
    environment:
      - TZ=${TIMEZONE}
      - UN_SONARR_0_URL=http://192.168.90.10:8989
      - UN_SONARR_0_API_KEY=${HOMEPAGE_VAR_SONARR_API_KEY}
      - UN_RADARR_0_URL=http://192.168.90.20:7878
      - UN_RADARR_0_API_KEY=${HOMEPAGE_VAR_RADARR_API_KEY}
  #sabnzbd:
   # image: lscr.io/linuxserver/sabnzbd:latest
   # container_name: sabnzbd
   # networks:
   #   - reverse_proxy
   # environment:
    #  - PUID=${USER_ID}
    #  - PGID=${GROUP_ID}
    #  - TZ=${TIMEZONE}
   # volumes:
    #  - ${CONFIG_ROOT:-.}/sabnzbd:/config
     # - ${DATA_ROOT}:/data
   # restart: always
   # labels:
     # - traefik.enable=true
     # - traefik.http.routers.sabnzbd.rule=Host(`$HOMEPAGE_VAR_SABNZBD_DOMAINNAME`)
     # - traefik.http.routers.sabnzbd.entrypoints=websecure
     # - traefik.http.routers.sabnzbd.tls=true
     # - traefik.http.routers.sabnzbd.tls.certresolver=myresolver
      #- traefik.http.services.sabnzbd.loadbalancer.server.port=8080
  calibre-web: #ebooks
    image: lscr.io/linuxserver/calibre-web:latest
    container_name: calibre-web
    networks:
      - reverse_proxy
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - DOCKER_MODS=linuxserver/mods:universal-calibre
      - OAUTHLIB_RELAX_TOKEN_SCOPE=1
    volumes:
      - ${CONFIG_ROOT:-.}/calibre-web:/config
      - ${MEDIA_ROOT}:/media
    restart: always
    labels:
      - traefik.enable=true
      #- traefik.http.middlewares.calibre-headers.headers.customRequestHeaders.X-Scheme=https
      #- traefik.http.middlewares.calibre-headers.headers.customRequestHeaders.X-Script-Name=/calibre
      #- traefik.http.middlewares.calibre-stripprefixregex.stripPrefixRegex.regex=/calibre
      #- traefik.http.routers.calibre.middlewares=calibre-headers,calibre-stripprefixregex
      - traefik.http.routers.calibre.rule=Host(`${HOMEPAGE_VAR_CALIBRE_DOMAINNAME}`)
      - traefik.http.routers.calibre.tls=true
      - traefik.http.routers.calibre.tls.certresolver=myresolver
      - traefik.http.services.calibre.loadbalancer.server.port=8083
  decluttarr:
    image: ghcr.io/manimatter/decluttarr:latest
    container_name: decluttarr
    restart: always
    networks:
      - reverse_proxy
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - RADARR_URL=${HOMEPAGE_VAR_RADARR_DOMAINNAME}
      - RADARR_KEY=${HOMEPAGE_VAR_RADARR_API_KEY}
      - SONARR_URL=${HOMEPAGE_VAR_SONARR_DOMAINNAME}
      - SONARR_KEY=${HOMEPAGE_VAR_SONARR_API_KEY}
      - LIDARR_URL=${HOMEPAGE_VAR_LIDARR_DOMAINNAME}
      - LIDARR_KEY=${HOMEPAGE_VAR_LIDARR_API_KEY}
      - QBITTORRENT_URL=http://192.168.90.9:8081/
      - LOG_LEVEL=${DECLUTTARR_LOG_LEVEL:-INFO}
      - TEST_RUN=${DECLUTTARR_TEST_RUN:-False}
      - REMOVE_TIMER=${DECLUTTARR_REMOVE_TIMER:-10}
      - REMOVE_FAILED=${DECLUTTARR_REMOVE_FAILED:-True}
      - REMOVE_FAILED_IMPORTS=${DECLUTTARR_REMOVE_FAILED_IMPORTS:-True}
      - REMOVE_METADATA_MISSING=${DECLUTTARR_REMOVE_METADATA_MISSING:-True}
      - REMOVE_MISSING_FILES=${DECLUTTARR_REMOVE_MISSING_FILES:-True}
      - REMOVE_ORPHANS=${DECLUTTARR_REMOVE_ORPHANS:-True}
      - REMOVE_SLOW=${DECLUTTARR_REMOVE_SLOW:-True}
      - REMOVE_STALLED=${DECLUTTARR_REMOVE_STALLED:-True}
      - REMOVE_UNMONITORED=${DECLUTTARR_REMOVE_UNMONITORED:-True}
      - RUN_PERIODIC_RESCANS=${DECLUTTARR_RUN_PERIODIC_RESCANS:-}
      - PERMITTED_ATTEMPTS=${DECLUTTARR_PERMITTED_ATTEMPTS:-3}
      - NO_STALLED_REMOVAL_QBIT_TAG=${DECLUTTARR_REMOVAL_QBIT_TAG:-"stalled"}
      - MIN_DOWNLOAD_SPEED=${DECLUTTARR_MIN_DOWNLOAD_SPEED:-100}
      - FAILED_IMPORT_MESSAGE_PATTERNS=${DECLUTTARR_FAILED_IMPORT_MESSAGE_PATTERNS:-}
      - IGNORED_DOWNLOAD_CLIENTS=${DECLUTTARR_IGNORED_DOWNLOAD_CLIENTS:-}
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    environment:
      - HOMEPAGE_ALLOWED_HOSTS=* #allow all, because homepage wont be exposed to the internet, ${HOMEPAGE_DOMAINNAME},192.168.90.250,192.168.178.22:3030 #no spaces between values!
      - PORT=3030 #change default listening port, because adguard uses the same
      - HOMEPAGE_VAR_PORTAINER_DOMAINNAME=${HOMEPAGE_VAR_PORTAINER_DOMAINNAME}
      -  HOMEPAGE_VAR_TRAEFIK_DOMAINNAME=${HOMEPAGE_VAR_TRAEFIK_DOMAINNAME}
      -  HOMEPAGE_VAR_ADGUARD_DOMAINNAME=${HOMEPAGE_VAR_ADGUARD_DOMAINNAME}
      -  HOMEPAGE_VAR_FLARESOLVERR_DOMAINNAME=${HOMEPAGE_VAR_FLARESOLVERR_DOMAINNAME}
      -  HOMEPAGE_VAR_CALIBRE_DOMAINNAME=${HOMEPAGE_VAR_CALIBRE_DOMAINNAME}
      -  HOMEPAGE_VAR_SABNZBD_DOMAINNAME=${HOMEPAGE_VAR_SABNZBD_DOMAINNAME}
      -  HOMEPAGE_VAR_PROWLARR_DOMAINNAME=${HOMEPAGE_VAR_PROWLARR_DOMAINNAME}
      -  HOMEPAGE_VAR_SONARR_DOMAINNAME=${HOMEPAGE_VAR_SONARR_DOMAINNAME}
      -  HOMEPAGE_VAR_SONARR_ANIME_DOMAINNAME=${HOMEPAGE_VAR_SONARR_ANIME_DOMAINNAME}
      -  HOMEPAGE_VAR_RADARR_DOMAINNAME=${HOMEPAGE_VAR_RADARR_DOMAINNAME}
      -  HOMEPAGE_VAR_LIDARR_DOMAINNAME=${HOMEPAGE_VAR_LIDARR_DOMAINNAME}
      -  HOMEPAGE_VAR_BAZARR_DOMAINNAME=${HOMEPAGE_VAR_BAZARR_DOMAINNAME}
      -  HOMEPAGE_VAR_IMMICH_DOMAINNAME=${HOMEPAGE_VAR_IMMICH_DOMAINNAME}
      -  HOMEPAGE_VAR_JELLYSEERR_DOMAINNAME=${HOMEPAGE_VAR_JELLYSEERR_DOMAINNAME}
      -  HOMEPAGE_VAR_JELLYFIN_DOMAINNAME=${HOMEPAGE_VAR_JELLYFIN_DOMAINNAME}

        
      -  HOMEPAGE_VAR_TITLE=${HOMEPAGE_VAR_TITLE}
      -  HOMEPAGE_VAR_LIDARR_API_KEY=${HOMEPAGE_VAR_LIDARR_API_KEY}
      -  HOMEPAGE_VAR_BAZARR_API_KEY=${HOMEPAGE_VAR_BAZARR_API_KEY}
      -  HOMEPAGE_VAR_SABNZBD_API_KEY=${HOMEPAGE_VAR_SABNZBD_API_KEY}
      -  HOMEPAGE_VAR_IMMICH_API_KEY=${HOMEPAGE_VAR_IMMICH_API_KEY}
      -  HOMEPAGE_VAR_SONARR_API_KEY=${HOMEPAGE_VAR_SONARR_API_KEY}
      -  HOMEPAGE_VAR_RADARR_API_KEY=${HOMEPAGE_VAR_RADARR_API_KEY}
      -  HOMEPAGE_VAR_GSP_GTN_API_KEY=${HOMEPAGE_VAR_GSP_GTN_API_KEY}
      -  HOMEPAGE_VAR_JELLYSEERR_API_KEY=${HOMEPAGE_VAR_JELLYSEERR_API_KEY}
      -  HOMEPAGE_VAR_JELLYFIN_API_KEY=${HOMEPAGE_VAR_JELLYFIN_API_KEY}
      -  HOMEPAGE_VAR_WEATHER_API_KEY=${HOMEPAGE_VAR_WEATHER_API_KEY}
    networks: 
      reverse_proxy:
        ipv4_address: 192.168.90.99
      socket_proxy:
    depends_on:
      - socket-proxy
    volumes:
      - ./homepage:/app/config
      - /mnt/pool:/mnt/pool:ro
    restart: always           
    command: ["node", "server.js", "-H", "tcp://192.168.91.254:2375"]
    labels:
      - traefik.enable=true
      - traefik.http.routers.homepage.rule=Host(`$HOMEPAGE_DOMAINNAME`) 
      - traefik.http.routers.homepage.entrypoints=websecure
      - traefik.http.routers.homepage.tls=true
      - traefik.http.routers.homepage.tls.certresolver=myresolver
      - traefik.http.services.homepage.loadbalancer.server.port=3030
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    networks:
        reverse_proxy:
          ipv4_address: 192.168.90.18
        socket_proxy:
    depends_on:
      - socket-proxy
    command: -H tcp://192.168.91.254:2375
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./portainer/data:/data
    environment:
      - TZ=$TIMEZONE
    labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.rule=Host(`$HOMEPAGE_VAR_PORTAINER_DOMAINNAME`)
      - traefik.http.routers.portainer.tls=true #not used according to official documentation
      - traefik.http.routers.portainer.entrypoints=websecure
      - traefik.http.routers.portainer.tls.certresolver=myresolver
      - traefik.http.services.portainer.loadbalancer.server.port=9000
    restart: always
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    restart: always
    networks:
      - reverse_proxy
      - socket_proxy
    depends_on:
      - socket-proxy
    command: -H tcp://192.168.91.254:2375
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=86400  # Checks for updates every 24 hours
      - WATCHTOWER_LABEL_ENABLE=true  # Ensures only labeled containers are updated (- "com.centurylinklabs.watchtower.enable=true)
      #- /var/run/docker.sock:/var/run/docker.sock #use socket proxy for higher safety
  autoheal:
    image: willfarrell/autoheal:latest
    container_name: autoheal
    restart: always
    networks:
      - reverse_proxy
      - socket_proxy
    depends_on:
      - socket-proxy
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
     # - DOCKER_HOST=tcp://socket-proxy:2375
    command: -H tcp://192.168.91.254:2375
  adguardhome: 
    # filterlist for yt-ads: https://raw.githubusercontent.com/Perflyst/PiHoleBlocklist/master/SmartTV-AGH.txt
    image: adguard/adguardhome:latest
    container_name: adguardhome
    restart: always
    healthcheck:
      test: ["CMD", "wget", "http://127.0.0.1:3000", "-qO", "/dev/null"]
      interval: 30s
      retries: 10
    networks:
      adguardhome:
        ipv4_address: 10.0.0.10
      reverse_proxy:
        ipv4_address: 192.168.90.35
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "68:68/tcp"
      - "68:68/udp"
      - "853:853/tcp"
      - "8089:8089/tcp"   # regular administrative interface
      #- "3000:3000" #dashboard exposed for the first setup
    volumes:
      - ./adguardhome/work:/opt/adguardhome/work
      - ./adguardhome/conf:/opt/adguardhome/conf
      - ./adguardhome/certs:/opt/adguardhome/certs
    labels:
      - traefik.enable=true
      - traefik.http.routers.adguardhome.rule=Host(`$HOMEPAGE_VAR_ADGUARD_DOMAINNAME`)
      - traefik.http.routers.adguardhome.tls=true
      - traefik.http.routers.adguardhome.entrypoints=websecure
      - traefik.http.routers.adguardhome.tls.certresolver=myresolver
      - traefik.http.services.adguardhome.loadbalancer.server.port=8089
    profiles:
      - adguardhome
  traefik-certs-dumper:
      image: ghcr.io/ldez/traefik-certs-dumper:latest
      container_name: traefik-certs-dumper
      restart: always
      networks:
        adguardhome:
        reverse_proxy:
          ipv4_address: 192.168.90.36
      entrypoint: sh -c '
        apk add jq
        ; while ! [ -e /data/acme.json ]
        || ! [ `jq ".[] | .Certificates | length" /data/acme.json` != 0 ]; do
        sleep 1
        ; done
        && traefik-certs-dumper file --version v2 --watch
        --clean false
        --source /data/acme.json --dest /certs'
      volumes:
        - ./letsencrypt:/data
        - ./adguardhome/certs:/certs
      profiles:
        - adguardhome

networks:
  default:
    external: true
    name: docker-compose-nas_default
  socket_proxy:
    name: socket_proxy
    external: true
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.91.0/24
  adguardhome:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br_adguard
    ipam:
      config:
        - subnet: 10.0.0.0/24
  reverse_proxy:
    name: reverse_proxy
    external: true
    ipam:
      config:
        - subnet: 192.168.90.0/24 

secrets:
  porkbun_api_key:
    file: ./secrets/porkbun_api_key.secret
  porkbun_secret_api_key:
    file: ./secrets/porkbun_secret_api_key.secret
  wireguard_private_key:
    file: ./secrets/wireguard_private_key.secret
