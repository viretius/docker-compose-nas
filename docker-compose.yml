#https://github.com/anujdatar/porkbun-ddns/tree/main porkbun ddns

services:
  # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy
    restart: always
    networks:
      socket_proxy:
        ipv4_address: 192.168.91.254 # You can specify a static IP
    # privileged: true # true for VM. False for unprivileged LXC container.
    ports:
      - "127.0.0.1:2375:2375" # Port 2375 should only ever get exposed to the internal network. When possible use this line.
    # I use the next line instead, as I want portainer to manage multiple docker endpoints within my home network.
    # - "2375:2375"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      # 0 to revoke access.
      # 1 to grant access.
      - EVENTS=1
      - PING=1
      - VERSION=0
      # Security critical ## Revoked by Default
      - AUTH=0
      - SECRETS=0
      - POST=1 # Watchtower
      # Not always needed
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - DELETE=1 #watchtower
      - EVENTS=1 
      - EXEC=0
      - IMAGES=1 # Portainer
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer, traefik
      - NODES=0
      - PLUGINS=1
      - SERVICES=1 # Portainer, traefik
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 # Portainer
      - VOLUMES=1 # Portainer
  traefik:
    image: ghcr.io/traefik/traefik:3.4
    container_name: traefik
    restart: unless-stopped
    networks: 
      # specify static IPs
      reverse_proxy:
        ipv4_address: 192.168.90.250 
      socket_proxy:
        ipv4_address: 192.168.91.250
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" #dashboard
    security_opt:
      - "no-new-privileges:true"
    secrets: # make secrets files available at /run/secrets
      - porkbun_api_key
      - porkbun_secret_api_key
    environment:
      - PORKBUN_API_KEY_FILE=/run/secrets/porkbun_api_key
      - PORKBUN_SECRET_API_KEY_FILE=/run/secrets/porkbun_secret_api_key
    command: #static
      - --ping=true
      - --api=true
      - --api.dashboard=true
      #- --api.insecure=true
      - --providers.docker=true
      - --serversTransport.insecureSkipVerify=true # Skip TLS verification for Docker socket
      #- --traefik.http.routers.api.entrypoints=traefik"
      - --providers.docker.exposedbydefault=false
      - --providers.docker.endpoint=tcp://socket-proxy:2375 # Enable for Socket Proxy. Disable otherwise.
      - --providers.docker.network=reverse_proxy # Traefik searches for container labels only in the specified network
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      #- --entrypoints.traefik.address=:8080 #?
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      ### dns challenge
      - --certificatesresolvers.myresolver.acme.dnschallenge=true
      - --certificatesresolvers.myresolver.acme.dnschallenge.provider=porkbun
      - --certificatesresolvers.myresolver.acme.dnschallenge.delaybeforecheck=120
      - --certificatesresolvers.myresolver.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53
      - --certificatesresolvers.myresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.myresolver.acme.email=${LETS_ENCRYPT_EMAIL}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
    labels: #dynamic
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(${TRAEFIK_HOSTNAME})" # HTTP Router for the dashboard
      - "traefik.http.routers.traefik-dashboard.tls=true"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      #- "traefik.http.routers.traefik-dashboard.middlewares=auth"
      #- "traefik.http.middlewares.auth.basicauth.users=$(TRAEFIK_USER):$(TRAEFIK_PW)"
      #- "traefik.http.routers.traefik-rtr.middlewares=chain-authelia@file" # For Authelia Authentication
    volumes:
      - ${CONFIG_ROOT:-.}/letsencrypt:/letsencrypt
    extra_hosts:
      - host.docker.internal:172.17.0.1 #? 
    depends_on:
      - socket-proxy
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      retries: 10
  sonarr:
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/sonarr:/config
      - ${MEDIA_ROOT}:/media
    restart: always
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://127.0.0.1:8989/ping"]
      interval: 30s
      retries: 10
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(${SONARR_HOSTNAME})"
      - traefik.http.routers.sonarr.entrypoints=websecure
      - "traefik.http.routers.sonarr.tls=true"
      - "traefik.http.routers.sonarr.tls.certresolver=myresolver"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/radarr:/config
      - ${MEDIA_ROOT}:/media
    restart: always
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://127.0.0.1:7878/ping"]
      interval: 30s
      retries: 10
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(${RADARR_HOSTNAME})"
      - traefik.http.routers.radarr.entrypoints=websecure
      - "traefik.http.routers.radarr.tls=true"
      - "traefik.http.routers.radarr.tls.certresolver=myresolver"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"
  lidarr:
    image: lscr.io/linuxserver/lidarr
    container_name: lidarr
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/lidarr:/config
      - ${MEDIA_ROOT}:/media
    restart: always
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://127.0.0.1:8686/ping"]
      interval: 30s
      retries: 10
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.lidarr.rule=Host(${LIDARR_HOSTNAME})"
      - "traefik.http.routers.lidarr.tls=true"
      - "traefik.http.routers.lidarr.entrypoints=websecure"
      - "traefik.http.routers.lidarr.tls.certresolver=myresolver"
      - "traefik.http.services.lidarr.loadbalancer.server.port=8686"
  bazarr:
    image: lscr.io/linuxserver/bazarr
    container_name: bazarr
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/bazarr/config:/config
      - ${MEDIA_ROOT}:/media
    restart: always
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://127.0.0.1:6767/ping"]
      interval: 5s
      retries: 10
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bazarr.rule=Host(${BAZARR_HOSTNAME})"
      - "traefik.http.routers.bazarr.tls=true"
      - traefik.http.routers.bazarr.entrypoints=websecure
      - "traefik.http.routers.bazarr.tls.certresolver=myresolver"
      - "traefik.http.services.bazarr.loadbalancer.server.port=6767"
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    # ports:
    #   - "9696:9696" # Explosed via gluetun
    security_opt:
      - no-new-privileges:true
    network_mode: "service:gluetun"
    depends_on:
      gluetun:
        condition: service_healthy
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/prowlarr:/config
    restart: always
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://127.0.0.1:9696/ping"]
      interval: 30s
      retries: 10
    # no traefik router, because qb gets exposed via gluetun (dashboard and downloads)
  jellyseerr:
    image: ghcr.io/fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    security_opt:
      - no-new-privileges:true
    environment:
      - LOG_LEVEL=debug
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/jellyseerr:/app/config
    restart: always
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "http://127.0.0.1:5055/api/v1/status",
          "-qO",
          "/dev/null",
        ]
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyseerr.rule=Host(${JELLYSEERR_HOSTNAME})"
      - traefik.http.routers.jellyseerr.tls=true
      - traefik.http.routers.jellyseerr.entrypoints=websecure
      - traefik.http.routers.jellyseerr.tls.certresolver=myresolver
      - traefik.http.services.jellyseerr.loadbalancer.server.port=5055
  flaresolverr: #bypass Cloudflare and DDoS-GUARD protection
    image: 21hsmw/flaresolverr:nodriver
    container_name: flaresolverr
    security_opt:
      - no-new-privileges:true
    restart: always
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - TZ=${TIMEZONE}
    labels:
      - traefik.enable=true
      - traefik.http.routers.flaresolverr.tls=true
      - traefik.http.routers.portainer.entrypoints=websecure
      - traefik.http.routers.flaresolverr.tls.certresolver=myresolver #original repo does not use certresolver? 
      - traefik.http.routers.flaresolverr.rule=Host(${FLARESOLVERR_HOSTNAME})
      - traefik.http.services.flaresolverr.loadbalancer.server.port=8191
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - WEBUI_PORT=8081 
      - QBITTORRENT_INTERFACE=tun0  # Forces all traffic through VPN interface
      # Port Forwarding Mod (Syncs qBittorrent with Gluetun)
      - DOCKER_MODS=ghcr.io/t-anc/gsp-qbittorent-gluetun-sync-port-mod:main
      - GSP_GTN_API_KEY=${GSP_GTN_API_KEY:-randomapikey}  # Gluetun API-key for port forwarding updates
      - GSP_QBITTORRENT_PORT=${GSP_QBITTORRENT_PORT:-53764}  # Torrenting port (auto-updated by Gluetun)
      - GSP_MINIMAL_LOGS=false  # Enables full logs for debugging purposes
    volumes:
      - ${CONFIG_ROOT:-.}/qbittorrent:/config
      - ${DOWNLOAD_ROOT}:/media/torrents
      - ${CONFIG_ROOT:-.}/gluetun:/gluetun
    healthcheck:
      # Container may fail if vpn token expired, so mark as unhealthy when there is no internet connection
      # see: https://github.com/qdm12/gluetun/issues/641#issuecomment-933856220
      test:
        ["CMD", "curl", "--fail", "http://127.0.0.1:8080", "https://google.com"]
      interval: 30s
      retries: 10
    # ─── Performance Optimization ──────────────────────────────────────
    ulimits:
      nofile:
        soft: 32768
        hard: 65536  # Increases allowed open files (important for high-speed torrenting)
    network_mode: "service:gluetun"
    depends_on:
      gluetun:
        condition: service_healthy
    # no traefik router here, because qb gets exposed via gluetun (dashboard and downloads)
    #- com.centurylinklabs.watchtower.depends-on=/vpn
    #https://github.com/qdm12/gluetun/discussions/2686
  gluetun:
    #image: qmcgaw/gluetun:v3.39.0 # Pinned to this version to avoid issues in v3.40+ specific to protonvpn
    image: ghcr.io/qdm12/gluetun:latest 
    container_name: gluetun
    stdin_open: true
    security_opt:
      - no-new-privileges:true
    cap_add:
      - NET_ADMIN
    networks:
      - reverse_proxy
    devices:
      - /dev/net/tun:/dev/net/tun
    secrets:
      - wireguard_private_key
    volumes:
      - ${CONFIG_ROOT:-.}/gluetun:/gluetun #store cpn-config persistently
      - ${CONFIG_ROOT:-.}/qbittorent/config:/config
      - ${CONFIG_ROOT:-.}/qbittorent/active:/active
      - ${CONFIG_ROOT:-.}/traefik/acme/:/acme
    ports:
      - 8080:8080      # Exposing QBittorrent-dashboard through Docker Host LAN IP  
      #- 8778:8888/tcp  # HTTP proxy (e.g. privoxy)
      #- 8388:8388/tcp  # Shadowsocks
      #- 8388:8388/udp  # Shadowsocks
      #- 8001:8000/tcp  # GT Control Server (api to update listening-port), not needed, since the mod is running in a container with network_mode: "service:gluetun"
      - 6881:6881      # QB for active P2P
      - 6881:6881/udp  # QB for active P2P
    environment:
      #- VPN_PORT_FORWARDING_UP_COMMAND=/bin/sh -c 'wget -O- --retry-connrefused --post-data "json={\"listen_port\":{{PORTS}}}" http://127.0.0.1:8080/api/v2/app/setPreferences 2>&1'
      - VPN_SERVICE_PROVIDER=${VPN_SERVICE_PROVIDER:-protonvpn}
      - VPN_TYPE=${VPN_TYPE:-wireguard}
      - TZ=${TIMEZONE}
      # WIREGUARD SETTINGS
      - WIREGUARD_PRIVATE_KEY_FILE=/run/secrets/wireguard_private_key
      - SERVER_COUNTRIES=Netherlands,Denmark,Sweden,Finland
      - PORT_FORWARD_ONLY=${PORT_FORWARD_ONLY:-on} # use Port forwarding enabled servers only
      - LOG_LEVEL=warn
      - UPDATER_PERIOD=24h #update vpn-serverstats (ips, keys,...)
      - FIREWALL_OUTBOUND_SUBNETS=192.168.91.0/24,172.17.0.0/24 # let qbittorrent communicate with other services in the lokal network
      #- DOT_PROVIDERS=cloudflare,google #dns-over-tls
      #- PUBLICIP_API=ip2location #get public ip
      #In qbittorrent, make sure you check Bypass authentication for clients on localhost, 
      #then you don't need to worry about passing auth into the port manager container. 
    sysctls:
       # Disables IPv6 to prevent leaks
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.default.disable_ipv6=1
      - net.ipv6.conf.all.disable_ipv6=1
      - net.ipv6.conf.lo.disable_ipv6=1
    #https://github.com/qdm12/gluetun-wiki/blob/main/setup/advanced/vpn-port-forwarding.md

    labels:
      - traefik.enable=true"
      #qBittorrent-dashboard
      - traefik.http.routers.qbittorrent.entrypoints=websecure
      - traefik.http.routers.qbittorrent.rule=Host(${QBITTORRENT_HOSTNAME})"
      - traefik.http.routers.qbittorrent.tls=true
      - traefik.http.routers.qbittorrent.tls.certresolver=myresolver
      - traefik.http.services.qbittorrent.loadbalancer.server.port=8081
      #prowlarr-dashboard
      - traefik.http.routers.prowlarr.entrypoints=websecure
      - traefik.http.routers.prowlarr.rule=Host(${PROWLARR_HOSTNAME})"
      - traefik.http.routers.prowlarr.tls=true
      - traefik.http.routers.prowlarr.tls.certresolver=myresolver
      - traefik.http.services.prowlarr.loadbalancer.server.port=9696 
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://google.com"]  # Checks if the VPN connection is active
      interval: 30s  # Runs every 30 seconds
      timeout: 10s  # Fails if it takes longer than 10 seconds
      retries: 3  # Allows 3 failures before marking the container as unhealthy
    restart: always    
  unpackerr:
    image: ghcr.io/unpackerr/unpackerr:latest
    container_name: unpackerr
    volumes:
      - ${DOWNLOAD_ROOT}:/media/torrents
    restart: always
    user: ${USER_ID}:${GROUP_ID}
    environment:
      - TZ=${TIMEZONE}
      - UN_SONARR_0_URL=http://sonarr:8989/
      - UN_SONARR_0_API_KEY=${SONARR_API_KEY}
      - UN_RADARR_0_URL=http://radarr:7878/
      - UN_RADARR_0_API_KEY=${RADARR_API_KEY}
  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd:latest
    container_name: sabnzbd
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/sabnzbd:/config
      - ${MEDIA_ROOT}:/media
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.sabnzbd.rule=Host(${SABNZBD_HOSTNAME})
      - traefik.http.routers.sabnzbd.entrypoints=websecure
      - traefik.http.routers.sabnzbd.tls=true
      - traefik.http.routers.sabnzbd.tls.certresolver=myresolver
      - traefik.http.services.sabnzbd.loadbalancer.server.port=8080
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      #- JELLYFIN_PublishedServerUrl=${HOSTNAME}/jellyfin
    volumes:
      - ${CONFIG_ROOT:-.}/jellyfin:/config
      - ${MEDIA_ROOT}:/media
    ports:
      - "7359:7359/udp"
      - "1900:1900/udp"
    restart: always
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://127.0.0.1:8096/health"]
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyfin.rule=Host(${JELLYFIN_HOSTNAME})
      - traefik.http.routers.jellyfin.entrypoints=websecure
      - traefik.http.routers.jellyfin.tls=true
      - traefik.http.routers.jellyfin.tls.certresolver=myresolver
      - traefik.http.services.jellyfin.loadbalancer.server.port=8096
  calibre-web:
    image: lscr.io/linuxserver/calibre-web:latest
    container_name: calibre-web
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - DOCKER_MODS=linuxserver/mods:universal-calibre
      - OAUTHLIB_RELAX_TOKEN_SCOPE=1
    volumes:
      - ${CONFIG_ROOT:-.}/calibre-web:/config
      - ${MEDIA_ROOT}/books:/books
    restart: unless-stopped
    labels:
      - traefik.enable=true
      #- traefik.http.middlewares.calibre-headers.headers.customRequestHeaders.X-Scheme=https
      #- traefik.http.middlewares.calibre-headers.headers.customRequestHeaders.X-Script-Name=/calibre
      #- traefik.http.middlewares.calibre-stripprefixregex.stripPrefixRegex.regex=/calibre
      #- traefik.http.routers.calibre.middlewares=calibre-headers,calibre-stripprefixregex
      - traefik.http.routers.calibre.rule=Host(${CALIBRE_HOSTNAME})
      - traefik.http.routers.calibre.tls=true
      - traefik.http.routers.calibre.tls.certresolver=myresolver
      - traefik.http.services.calibre.loadbalancer.server.port=8083
  decluttarr:
    image: ghcr.io/manimatter/decluttarr:latest
    container_name: decluttarr
    restart: always
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - RADARR_URL=http://radarr:7878/
      - RADARR_KEY=${RADARR_API_KEY}
      - SONARR_URL=http://sonarr:8989/
      - SONARR_KEY=${SONARR_API_KEY}
      - LIDARR_URL=http://lidarr:8686/
      - LIDARR_KEY=${LIDARR_API_KEY}
      - QBITTORRENT_URL=http://qbittorrent:8080
      - QBITTORRENT_USERNAME=${QBITTORRENT_USERNAME}
      - QBITTORRENT_PASSWORD=${QBITTORRENT_PASSWORD}
      - LOG_LEVEL=${DECLUTTARR_LOG_LEVEL:-INFO}
      - TEST_RUN=${DECLUTTARR_TEST_RUN:-False}
      - REMOVE_TIMER=${DECLUTTARR_REMOVE_TIMER:-10}
      - REMOVE_FAILED=${DECLUTTARR_REMOVE_FAILED:-True}
      - REMOVE_FAILED_IMPORTS=${DECLUTTARR_REMOVE_FAILED_IMPORTS:-True}
      - REMOVE_METADATA_MISSING=${DECLUTTARR_REMOVE_METADATA_MISSING:-True}
      - REMOVE_MISSING_FILES=${DECLUTTARR_REMOVE_MISSING_FILES:-True}
      - REMOVE_ORPHANS=${DECLUTTARR_REMOVE_ORPHANS:-True}
      - REMOVE_SLOW=${DECLUTTARR_REMOVE_SLOW:-True}
      - REMOVE_STALLED=${DECLUTTARR_REMOVE_STALLED:-True}
      - REMOVE_UNMONITORED=${DECLUTTARR_REMOVE_UNMONITORED:-True}
      - RUN_PERIODIC_RESCANS=${DECLUTTARR_RUN_PERIODIC_RESCANS:-}
      - PERMITTED_ATTEMPTS=${DECLUTTARR_PERMITTED_ATTEMPTS:-3}
      - NO_STALLED_REMOVAL_QBIT_TAG=${DECLUTTARR_REMOVAL_QBIT_TAG:-"stalled"}
      - MIN_DOWNLOAD_SPEED=${DECLUTTARR_MIN_DOWNLOAD_SPEED:-100}
      - FAILED_IMPORT_MESSAGE_PATTERNS=${DECLUTTARR_FAILED_IMPORT_MESSAGE_PATTERNS:-}
      - IGNORED_DOWNLOAD_CLIENTS=${DECLUTTARR_IGNORED_DOWNLOAD_CLIENTS:-}
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    environment:
      - DOCKER_HOST=tcp://socket-proxy:2375
      - PORT=3030 #change default listening port, because adguard uses the same
    networks:
      - reverse_proxy
      - socket_proxy
    volumes:
      - ${CONFIG_ROOT:-.}/homepage:/app/config
      - ${MEDIA_ROOT}:/media
    restart: always           
    command: ["sh", "-c", "cp -n /app/config/tpl/*.yaml /app/config && node server.js"] 
    labels:
      - traefik.enable=true
      - traefik.http.routers.homepage.rule=Host(${HOMEPAGE_HOSTNAME})
      - traefik.http.routers.homepage.entrypoints=websecure
      - traefik.http.routers.homepage.tls=true
      - traefik.http.routers.homepage.tls.certresolver=myresolver
      - traefik.http.services.homepage.loadbalancer.server.port=3030
  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    environment:
      - DOCKER_HOST=tcp://socket-proxy:2375
    networks:
      - reverse_proxy
      - socket_proxy
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./@docker/docker-compose-nas/portainer/data:/data
    labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.rule=Host(${PORTAINER_HOSTNAME})
      - traefik.http.routers.portainer.entrypoints=websecure
      - "traefik.http.routers.frontend.service=frontend"
      - traefik.http.routers.portainer.tls=true #not used according to official documentation
      - traefik.http.routers.portainer.tls.certresolver=myresolver
      - traefik.http.services.portainer.loadbalancer.server.port=9000
    restart: always
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: unless-stopped
    networks:
      - reverse_proxy
      - socket_proxy
    environment:
      - DOCKER_HOST=tcp://socket-proxy:2375
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=86400  # Checks for updates every 24 hours
      - WATCHTOWER_LABEL_ENABLE=true  # Ensures only labeled containers are updated (- "com.centurylinklabs.watchtower.enable=true")
      #- /var/run/docker.sock:/var/run/docker.sock #use socket proxy for higher safety
  autoheal:
    image: willfarrell/autoheal:latest
    container_name: autoheal
    restart: always
    networks:
      - reverse_proxy
      - socket_proxy
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
      - DOCKER_HOST=tcp://socket-proxy:2375

networks:
  default:
    driver: bridge
  socket_proxy:
    name: socket_proxy
    external: true
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.91.0/24
  reverse_proxy:
    name: reverse_proxy
    external: true
    ipam:
      config:
        - subnet: 192.168.90.0/24 

secrets:
  porkbun_api_key:
    file: ./secrets/porkbun_api_key.secret
  porkbun_secret_api_key:
    file: ./secrets/porkbun_secret_api_key.secret
  wireguard_private_key:
    file: ./secrets/wireguard_private_key.secret
